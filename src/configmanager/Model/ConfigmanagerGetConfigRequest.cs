/*
 * Config Manager Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = configmanager.Client.OpenAPIDateConverter;

namespace configmanager.Model
{
    /// <summary>
    /// ConfigmanagerGetConfigRequest
    /// </summary>
    [DataContract(Name = "configmanagerGetConfigRequest")]
    public partial class ConfigmanagerGetConfigRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigmanagerGetConfigRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConfigmanagerGetConfigRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigmanagerGetConfigRequest" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId (required).</param>
        /// <param name="key">key (required).</param>
        /// <param name="businessDomain">businessDomain.</param>
        public ConfigmanagerGetConfigRequest(string tenantId = default(string), string key = default(string), string businessDomain = default(string))
        {
            // to ensure "tenantId" is required (not null)
            if (tenantId == null)
            {
                throw new ArgumentNullException("tenantId is a required property for ConfigmanagerGetConfigRequest and cannot be null");
            }
            this.TenantId = tenantId;
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for ConfigmanagerGetConfigRequest and cannot be null");
            }
            this.Key = key;
            this.BusinessDomain = businessDomain;
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", IsRequired = true, EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets BusinessDomain
        /// </summary>
        [DataMember(Name = "businessDomain", EmitDefaultValue = false)]
        public string BusinessDomain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfigmanagerGetConfigRequest {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  BusinessDomain: ").Append(BusinessDomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
